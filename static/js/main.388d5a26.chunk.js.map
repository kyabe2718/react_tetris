{"version":3,"sources":["Mino.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["IMino","type","color","shape","rot","TMino","OMino","_","LMino","JMino","ZMino","SMino","typeToMino","rotCounterClockWise","copyCells","cells","JSON","parse","stringify","minoPosition","current","mino","map","p","x","y","checkInRange","every","height","length","width","TetrisBoard","props","state","undefined","Array","fill","this","setState","removed_row","removedFilledRow","new_mino","createNewMino","Math","floor","random","Mino","console","log","calcNextState","cmd","forEach","body","row","className","cell","style","background","board","next","alt","dx","filled_row","findIndex","copy","splice","unshift","React","Component","TetrisController","timerID","onKeyDown","bind","onClick","document","addEventListener","setInterval","update","forceUpdate","removeEventListener","clearInterval","event","key","controlMino","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.388d5a26.chunk.js","sourcesContent":["export type MinoType = \"I\" | \"T\" | \"O\" | \"L\" | \"J\" | \"Z\" | \"S\";\nexport type MinoShape = [[number, number], [number, number], [number, number], [number, number]];\nexport type RotType = 0 | 1 | 2 | 3;\n\nexport type Mino = {\n    type: MinoType\n    color: string\n    shape: (_: RotType) => MinoShape\n};\n\nconst IMino: Mino = {\n    type: \"I\",\n    color: \"#00ffff\",\n    shape: (rot) => {\n        const pattern: MinoShape[] = [\n            [[0, -1], [0, 0], [0, 1], [0, 2]],\n            [[-1, 0], [0, 0], [1, 0], [2, 0]],\n            [[0, -2], [0, -1], [0, 0], [0, 1]],\n            [[-2, 0], [-1, 0], [0, 0], [1, 0]],\n        ];\n        return pattern[rot];\n    }\n}\n\nconst TMino: Mino = {\n    type: \"T\",\n    color: \"#ff00ff\",\n    shape: (rot) => {\n        const pattern: MinoShape[] = [\n            [[0, 0], [-1, 0], [1, 0], [0, -1]],\n            [[0, 0], [1, 0], [0, 1], [0, -1]],\n            [[0, 0], [-1, 0], [1, 0], [0, 1]],\n            [[0, 0], [-1, 0], [0, 1], [0, -1]]\n        ];\n        return pattern[rot];\n    }\n}\n\nconst OMino: Mino = {\n    type: \"O\",\n    color: \"#ffff00\",\n    shape: (_) => {\n        return [[0, -1], [1, -1], [0, 0], [1, 0]];\n    }\n}\n\nconst LMino: Mino = {\n    type: \"L\",\n    color: \"#ff8800\",\n    shape: (rot) => {\n        const pattern: MinoShape[] = [\n            [[0, 0], [1, 0], [-1, 0], [1, -1]],\n            [[0, 0], [0, 1], [0, -1], [1, 1]],\n            [[0, 0], [1, 0], [-1, 0], [-1, 1]],\n            [[0, 0], [0, 1], [0, -1], [-1, -1]]\n        ];\n        return pattern[rot];\n    }\n}\n\nconst JMino: Mino = {\n    type: \"J\",\n    color: \"#0000ff\",\n    shape: (rot) => {\n        const pattern: MinoShape[] = [\n            [[0, 0], [-1, 0], [1, 0], [-1, -1]],\n            [[0, 0], [0, 1], [0, -1], [1, -1]],\n            [[0, 0], [1, 0], [-1, 0], [1, 1]],\n            [[0, 0], [0, 1], [0, -1], [-1, 1]]\n        ];\n        return pattern[rot];\n    }\n}\n\nconst ZMino: Mino = {\n    type: \"Z\",\n    color: \"#ff0000\",\n    shape: (rot) => {\n        const pattern: MinoShape[] = [\n            [[0, 0], [1, 0], [0, -1], [-1, -1]],\n            [[0, 0], [1, 0], [0, 1], [1, -1]],\n        ];\n        return pattern[rot % 2];\n    }\n}\n\nconst SMino: Mino = {\n    type: \"S\",\n    color: \"#00ff00\",\n    shape: (rot) => {\n        const pattern: MinoShape[] = [\n            [[0, 0], [-1, 0], [0, -1], [1, -1]],\n            [[0, 0], [0, -1], [1, 0], [1, 1]],\n        ];\n        return pattern[rot % 2];\n    }\n}\n\nexport function typeToMino(type: MinoType): Mino {\n    switch (type) {\n        case \"I\":\n            return IMino;\n        case \"T\":\n            return TMino;\n        case \"O\":\n            return OMino;\n        case \"L\":\n            return LMino;\n        case \"J\":\n            return JMino;\n        case \"Z\":\n            return ZMino;\n        case \"S\":\n            return SMino;\n    }\n}\n\nexport function getRandomMinoType(): MinoType {\n    const num = Math.floor(Math.random() * (6 + 1)); // [0, 7]\n    switch (num) {\n        case 0:\n            return \"I\";\n        case 1:\n            return \"T\";\n        case 2:\n            return \"O\";\n        case 3:\n            return \"L\";\n        case 4:\n            return \"J\";\n        case 5:\n            return \"Z\";\n        case 6:\n            return \"S\";\n        default:\n            // unreached\n            return \"I\";\n    }\n}\n\nexport function rotClockWise(rot : RotType): RotType{\n    return (rot + 1) % 4 as RotType;\n}\nexport function rotCounterClockWise(rot : RotType): RotType{\n    return (rot - 1) % 4 as RotType;\n}\n","import './App.css';\nimport React from 'react';\nimport * as Mino from './Mino';\n\ntype BoardProps = {\n    width: number,\n    height: number\n};\n\ntype CellType = (Mino.MinoType | null);\ntype CurrentMinoType = {\n    mino: Readonly<Mino.Mino>,\n    x: number,\n    y: number,\n    rot: Mino.RotType,\n};\n\nfunction copyCells(cells: CellType[][]): CellType[][] {\n    return JSON.parse(JSON.stringify(cells)); // deep copy\n}\n\nfunction minoPosition(current: Readonly<CurrentMinoType>): [number, number][] {\n    return current.mino.shape(current.rot).map((p) => {\n        return [p[0] + current.x, p[1] + current.y];\n    });\n}\n\nfunction checkInRange(cells: readonly CellType[][], current: Readonly<CurrentMinoType>): boolean {\n    return minoPosition(current).every(([x, y]) => {\n        const height = cells.length;\n        const width = cells[0].length;\n        if (y < 0 || height <= y)\n            return false;\n        if (x < 0 || width <= x)\n            return false;\n        return cells[y][x] === null;\n    });\n}\n\ntype BoardStatus = {\n    current: CurrentMinoType | undefined,\n    cells: CellType[/*y*/][/*x*/] // static minos\n}\n\ntype MinoControlCmd = \"Left\" | \"Right\" | \"Down\" | \"Clockwise\" | \"CounterClockwise\";\n\nclass TetrisBoard extends React.Component<BoardProps, BoardStatus> {\n    constructor(props: BoardProps) {\n        super(props);\n        this.state = {\n            current: undefined,\n            cells: Array<Array<CellType>>(props.height).fill([null])\n                .map((_) => Array<CellType>(props.width).fill(null))\n        };\n    }\n\n    update() {\n        this.setState((state) => {\n                const removed_row = TetrisBoard.removedFilledRow(state.cells);\n                if (removed_row !== null)\n                    return {current: state.current, cells: removed_row};\n\n                if (state.current === undefined) {\n                    const new_mino = this.createNewMino(Mino.getRandomMinoType());\n                    if (checkInRange(state.cells, new_mino)) {\n                        return {current: new_mino, cells: state.cells};\n                    } else {\n                        console.log(\"game over\");\n                    }\n                }\n\n                return this.calcNextState(\"Down\", state);\n            }\n        );\n    }\n\n    controlMino(cmd: MinoControlCmd) {\n        this.setState((state) => {\n            return this.calcNextState(cmd, state);\n        });\n    }\n\n    render() {\n        let cells = copyCells(this.state.cells);\n        const current = this.state.current;\n        if (current) {\n            minoPosition(current).forEach(([x, y]) => {\n                if (0 <= x && x < this.props.width && 0 <= y && y < this.props.height) {\n                    cells[y][x] = current.mino.type;\n                }\n            });\n        }\n        const body = cells.map((row) => {\n            return <tr className=\"tetris_th\">{row.map((cell) => {\n                if (cell === null) {\n                    return <td className=\"tetris_td\" style={{background: \"#ffffff\"}}/>\n                } else {\n                    const mino = Mino.typeToMino(cell);\n                    return <td className=\"tetris_td\" style={{background: mino.color}}/>\n                }\n            })}</tr>;\n        });\n\n        return (\n            <div>\n                <table className=\"tetris_board\">\n                    <tbody>{body}</tbody>\n                </table>\n                <TetrisController board={this}/>\n            </div>\n        );\n    }\n\n    private createNewMino(type: Mino.MinoType): CurrentMinoType {\n        return {\n            mino: Mino.typeToMino(type),\n            x: Math.floor((this.props.width + 1) / 2),\n            y: 1,\n            rot: 0\n        };\n    }\n\n    private calcNextState(cmd: MinoControlCmd, state: BoardStatus): BoardStatus {\n        if (state.current !== undefined) {\n            const next = ((current, cmd) => {\n                switch (cmd) {\n                    case \"Left\":\n                        return {...current, x: current.x - 1};\n                    case \"Right\":\n                        return {...current, x: current.x + 1};\n                    case \"Down\":\n                        return {...current, y: current.y + 1};\n                    case \"Clockwise\":\n                        return {...current, rot: Mino.rotClockWise(current.rot)};\n                    case \"CounterClockwise\":\n                        return {...current, rot: Mino.rotCounterClockWise(current.rot)};\n                }\n            })(state.current, cmd);\n\n            if (checkInRange(state.cells, next))\n                return {...state, current: next};\n\n            if (cmd === \"Down\") {\n                // current cell have been dropped\n                let cells = copyCells(state.cells);\n                minoPosition(state.current).forEach(([x, y]) => {\n                    if (state.current !== undefined)\n                        cells[y][x] = state.current.mino.type;\n                });\n                return {...state, current: undefined, cells: cells};\n            }\n\n            if (cmd === \"Clockwise\" || cmd === \"CounterClockwise\") {\n                let alt: BoardStatus | undefined = undefined;\n                // ずらして入るなら入れる\n                [1, -1, 2, -2].forEach((dx) => {\n                    if (alt === undefined && checkInRange(state.cells, {...next, x: next.x + dx}))\n                        alt = {...state, current: {...next, x: next.x + dx}};\n                });\n                if (alt !== undefined)\n                    return alt;\n            }\n        }\n        return state;\n    }\n\n    private static removedFilledRow(cells: CellType[][]): CellType[][] | null {\n        // If there is a filled row, remove this\n        const filled_row = cells.findIndex((row) => {\n            return row.every((cell) => {\n                return cell != null;\n            });\n        });\n        if (filled_row !== -1) {\n            let copy = copyCells(cells);\n            copy.splice(filled_row, 1);\n            copy.unshift(new Array<CellType>(cells[0].length).fill(null));\n            return copy;\n        }\n        return null;\n    }\n}\n\ntype TetrisControllerProps = {\n    board: TetrisBoard\n};\n\nclass TetrisController extends React.Component<any, TetrisControllerProps> {\n    private timerID: NodeJS.Timeout | undefined | null;\n    private readonly board: TetrisBoard;\n\n    constructor(props: TetrisControllerProps) {\n        super(props);\n        this.board = props.board;\n        this.onKeyDown = this.onKeyDown.bind(this);\n    }\n\n    render() {\n        if (this.timerID === undefined || this.timerID === null) {\n            const startGame = (() => {\n                document.addEventListener(\"keydown\", this.onKeyDown);\n                this.timerID = setInterval(() => {\n                    this.board.update();\n                }, 1000);\n                this.forceUpdate();\n            });\n\n            return (\n                <button className=\"startButton\" onClick={startGame}>\n                    {this.timerID === undefined ? \"Game Start\" : \"Restart\"}\n                </button>\n            );\n        } else {\n            const stopGame = (() => {\n                document.removeEventListener(\"keydown\", this.onKeyDown);\n                if (this.timerID !== undefined && this.timerID !== null) {\n                    clearInterval(this.timerID);\n                    this.timerID = null;\n                }\n                this.forceUpdate();\n            });\n            return <button className=\"startButton\" onClick={stopGame}>Stop Game</button>;\n        }\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n        const cmd = ((key) => {\n            switch (key) {\n                case \"ArrowDown\":\n                    return \"Down\";\n                case \"ArrowLeft\":\n                    return \"Left\";\n                case \"ArrowRight\":\n                    return \"Right\";\n                case \"ArrowUp\":\n                    return \"Clockwise\";\n                default:\n                    return null;\n            }\n        })(event.key);\n\n        if (cmd !== null)\n            this.board.controlMino(cmd);\n    }\n}\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <TetrisBoard width={10} height={20}/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}